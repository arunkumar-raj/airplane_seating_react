{"version":3,"sources":["flight.jpg","Seating.js","Booking.js","index.js"],"names":["counter","seat_allocation","Seating","props","componentDidMount","seating","seating_array","JSON","parse","maxVal","Array","isArray","reduce","acc","seat","setState","max_column","seating_array_length","length","convertArrayToObject","array","obj","item","Get_Seating_Arrangements","align_seat","state","row_index","args","row","column","create_row_arr","from","x","i","convert_json_row","cols","column_key","containsObject","row_key","Allocate_seats","Object","keys","Allocate_aisle_seats","Allocate_window_seats","Allocate_middle_seats","passenger","first_row_key","last_row_key","aisle_counter","values","map","row_value","key","first_column_key","last_column_key","seatnumber","type","window_counter","middle_counter","val","index","isObject","undefined","constructor","list","hasOwnProperty","this","flight","Container","maxWidth","className","Table","sx","minWidth","TableHead","TableRow","TableCell","align","TableBody","rowkey","value","rkey","Component","Booking","handleSeating","externalId","event","target","check_json","IsJsonString","error","handlePassenger","str","e","Grid","container","xs","Card","CardMedia","image","component","height","Typography","variant","direction","justifyContent","FormControl","fullWidth","m","TextField","id","label","onChange","Alert","severity","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.43372301.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/flight.945f3702.jpg\";","import React, { Component } from 'react';\n\n\n//Import Designs\nimport {Container,Table,TableBody,TableCell,TableHead,TableRow} from '@mui/material';\nvar counter = 0;\nvar seat_allocation =  {};\n//Create a component to Create Seating\nclass Seating extends Component{    \n\n    constructor(props){\n        super(props); \n        this.state = {max_column:0,seating_array_length:0};\n    }\n\n    componentDidMount = () =>{\n        let seating = this.props.seating;\n        let seating_array = JSON.parse(seating);\n        let maxVal = '';\n        if(Array.isArray(seating_array)){\n            maxVal= seating_array.reduce((acc, seat) => acc = acc > seat[1] ? acc : seat[1], 0);   \n\n        }\n        this.setState({max_column:maxVal,seating_array_length:seating_array.length});\n    }\n    //To Parse array as object\n    convertArrayToObject = (array) => {\n        const initialValue = {};\n        return array.reduce((obj, item) => {\n          return {\n            ...obj,\n            [item]: item,\n          };\n        }, initialValue);\n    }\n\n    //Check for object Key\n    containsObject(obj, list) {\n        return obj.hasOwnProperty(list);\n    }\n\n    Get_Seating_Arrangements = () => {\n        \n        let seating = this.props.seating;\n        let seating_array = JSON.parse(seating);\n        var align_seat =  {};\n\n        //Check is array seating value\n        if(Array.isArray(seating_array)){\n\n            //Get MAX column value to loop columns\n            let maxVal= this.state.max_column;\n            if(maxVal === 0){\n                return '';\n            }\n     \n            //Based on dimension rows will be there\n            let row_index=0;\n\n            //Looping Two dimensional array / Input Value\n            for(let args=0; args < seating_array.length; args++){\n\n                //Split Array index in to variables\n                let [row, column] = seating_array[args];\n\n                //Create an array by row values\n                //[3,2] row is 3 create array(0,1,2)\n                //Convert row values in to object\n                let create_row_arr = Array.from({length: row}, (x, i) => i);\n                let convert_json_row = this.convertArrayToObject(create_row_arr);\n\n                //Loop Again using max column \n                for(let cols=1; cols <= maxVal; cols++){\n                    \n                    //Add object value\n                    let column_key = 'column_'+cols;\n                    let check_key_column = this.containsObject(align_seat,column_key);\n\n                    //Check for key if not created then create object\n                    if(!check_key_column){\n                        align_seat[column_key] = {};\n                    }\n\n                    let row_key = 'row_'+row_index;    \n                    if(cols <= column){     \n                        align_seat[column_key][row_key] = convert_json_row;\n                    }\n                    else{\n                        align_seat[column_key][row_key] =null;\n                    }\n\n                }\n                row_index++;\n            }\n            \n        }\n\n        if(!this.containsObject(seat_allocation)){\n            this.Allocate_seats(align_seat);\n        }\n\n        return seat_allocation;  \n        \n    }\n\n\n    \n    Allocate_seats = (align_seat) => {\n        if(align_seat){\n           let seat_length =Object.keys(align_seat).length;\n           if(seat_length > 0){\n                //Created_Aisle seats\n                this.Allocate_aisle_seats(align_seat);\n                this.Allocate_window_seats(align_seat);\n                this.Allocate_middle_seats(align_seat);\n           }\n        }\n    }\n\n    \n    Allocate_aisle_seats = (align_seat) => {\n        let passenger = this.props.passenger;\n        let row_key = '';\n        let first_row_key = '';\n        let last_row_key = '';\n        let aisle_counter = 0;\n        \n        //Assign aisle seats\n        Object.values(align_seat).map((row_value,key) => {\n            let colum_key_create = (key + 1);\n            let column_key = 'column_'+colum_key_create;\n            \n            //Add object value\n            let check_key_column = this.containsObject(seat_allocation,column_key);\n\n            //Check for key if not created then create object\n            if(!check_key_column){\n                seat_allocation[column_key] = {};\n            }\n\n            //Get First and Last row in a column\n            let first_column_key = Object.keys(row_value)[0];                    \n            let last_column_key = Object.keys(row_value)[Object.keys(row_value).length-1];\n            \n            \n            Object.values(row_value).map((row,row_index) => {\n\n                row_key = 'row_'+row_index;  \n                seat_allocation[column_key][row_key] ={}\n\n                if(row != null){\n                    //Get row keys to find first and last seat\n                    first_row_key = Object.keys(row)[0];\n                    last_row_key = Object.keys(row)[Object.keys(row).length-1];\n                    if(row_value[row_key]){\n                        \n                        switch(row_key){\n                            //First column last seat\n                            case first_column_key:\n                                if(aisle_counter < passenger){\n                                    aisle_counter ++;\n                                    seat_allocation[column_key][first_column_key][last_row_key]= {seatnumber:aisle_counter,type:'aisle'};\n                                } \n                                else{\n                                    seat_allocation[column_key][first_column_key][last_row_key]= {seatnumber:'empty',type:'aisle'};\n                                }\n                            break;\n                            //Last column first seat\n                            case last_column_key:\n                                if(aisle_counter < passenger){\n                                    aisle_counter ++;\n                                    seat_allocation[column_key][last_column_key][first_row_key]= {seatnumber:aisle_counter,type:'aisle'};\n                                } \n                                else{\n                                    seat_allocation[column_key][last_column_key][first_row_key]= {seatnumber:'empty',type:'aisle'};\n                                }\n                            break;\n                            //intermediate seat with row ends\n                            default:\n                                if(aisle_counter < passenger){\n                                    aisle_counter ++;\n                                    seat_allocation[column_key][row_key][first_row_key]= {seatnumber:aisle_counter,type:'aisle'};\n                                    if(aisle_counter < passenger){\n                                        aisle_counter ++;\n                                        seat_allocation[column_key][row_key][last_row_key]= {seatnumber:aisle_counter,type:'aisle'};\n                                    }else{\n                                        seat_allocation[column_key][row_key][last_row_key]= {seatnumber:'empty',type:'aisle'};\n                                    }\n                                } \n                                else{\n                                    seat_allocation[column_key][row_key][first_row_key]= {seatnumber:'empty',type:'aisle'}; \n                                }\n                            break;\n                        }\n                    }\n                }\n                return row_value;\n            });\n            return row_value;\n        });\n        counter = aisle_counter;\n    }\n\n    Allocate_window_seats= (align_seat) => {\n        let passenger = this.props.passenger;\n        let row_key = '';\n        let first_row_key = '';\n        let last_row_key = '';\n        let window_counter = counter;\n\n        //Assign window seats\n        Object.values(align_seat).map((row_value,key) => {\n            let colum_key_create = (key + 1);\n            let column_key = 'column_'+colum_key_create;\n            \n            //Add object value\n            let check_key_column = this.containsObject(seat_allocation,column_key);\n\n            //Check for key if not created then create object\n            if(!check_key_column){\n                seat_allocation[column_key] = {};\n            }\n\n            //Get First and Last row in a column\n            let first_column_key = Object.keys(row_value)[0];                    \n            let last_column_key = Object.keys(row_value)[Object.keys(row_value).length-1];\n            \n            \n            Object.values(row_value).map((row,row_index) => {\n                row_key = 'row_'+row_index;  \n                if(row != null){\n                    //Get row keys to find first and last seat\n                    first_row_key = Object.keys(row)[0];\n                    last_row_key = Object.keys(row)[Object.keys(row).length-1];\n                    if(row_value[row_key]){\n                        \n                         switch(row_key){\n                             //First column and first seat\n                            case first_column_key:\n                                if(window_counter < passenger){\n                                    window_counter ++;\n                                    seat_allocation[column_key][first_column_key][first_row_key]= {seatnumber:window_counter,type:'window'};\n                                } \n                                else{\n                                    seat_allocation[column_key][first_column_key][first_row_key]= {seatnumber:'empty',type:'window'};\n                                }\n                            break;\n                            //last column and last seat\n                            case last_column_key:\n                                if(window_counter < passenger){\n                                    window_counter ++;\n                                    seat_allocation[column_key][last_column_key][last_row_key] = {seatnumber:window_counter,type:'window'};\n                                } \n                                else{\n                                    seat_allocation[column_key][last_column_key][last_row_key] = {seatnumber:'empty',type:'window'};\n                                }\n                            break;\n                            default:\n                            break;\n \n                        } \n                    }\n                }\n                return row_value;\n            });\n            return row_value;\n        });\n        counter = window_counter;\n    }\n\n    Allocate_middle_seats= (align_seat) => {\n        let passenger = this.props.passenger;\n        let row_key = '';\n        let first_row_key = '';\n        let last_row_key = '';\n        let middle_counter = counter;\n        //Assign middle seats\n        Object.values(align_seat).map((row_value,key) => {\n            let colum_key_create = (key + 1);\n            let column_key = 'column_'+colum_key_create;\n            \n            //Add object value\n            let check_key_column = this.containsObject(seat_allocation,column_key);\n\n            //Check for key if not created then create object\n            if(!check_key_column){\n                seat_allocation[column_key] = {};\n            }\n\n            Object.values(row_value).map((row,row_index) => {\n                row_key = 'row_'+row_index;  \n                if(row !== null){\n                    first_row_key = Object.keys(row)[0];\n                    last_row_key = Object.keys(row)[Object.keys(row).length-1];\n                    if(row_value[row_key]){\n                        //Get all rows and fill remaining seats as middle \n                        Object.values(row).map((val,index) => {\n                            if(index != first_row_key && index != last_row_key){\n                                if(middle_counter < passenger){\n                                    middle_counter ++;\n                                    seat_allocation[column_key][row_key][index]= {seatnumber:middle_counter,type:'middle'};\n                                }else{\n                                    seat_allocation[column_key][row_key][index]= {seatnumber:'empty',type:'middle'};\n                                }\n                            }\n                            return row;\n                        });\n\n                    }\n                }\n                return row_value;\n            });\n            return row_value;\n        });\n        counter = middle_counter;\n    }\n\n\n    isObject= (obj) => {\n        return obj !== undefined && obj !== null && obj.constructor == Object;\n    }\n\n    render(){\t\n        if(this.state.max_column!==0){\n            let flight = this.Get_Seating_Arrangements();\n            let seating = this.props.seating;\n            let seating_array = JSON.parse(seating);\n            \n            return (\n                <Container maxWidth=\"false\" className=\"airplane_table\">\n                    <Table sx={{ minWidth: 650 }}>\n                        <TableHead>\n                            <TableRow>\n                                {\n                                    Object.keys(seating_array).map((key,val) =>\n                                        <TableCell key={key} align=\"center\">{'Column '+ key}</TableCell>\n                                    )\n                                }\n                            </TableRow>\n                        </TableHead>\n\n                        <TableBody>\n                            {\n                                Object.values(flight).map((row_value,key) =>\n                                    <TableRow key={key}>\n                                        {\n                                            Object.values(row_value).map((row,rowkey) =>\n                                                <TableCell key={rowkey} align=\"center\">\n                                                    {\n                                                        Object.values(row).map((value,rkey) =>\n                                                        <div className={\"aero_seats \"+value.type}>{(value.seatnumber != 'empty')?value.seatnumber:'X'}</div>\n                                                        )\n                                                    }\n                                                </TableCell>\n                                            )\n                                        }\n                                    </TableRow>\n                                )\n                            }\n                        \n                        </TableBody>\n                    </Table>\n                </Container>\n            )\n        }else{\n            return '';\n        }\n    }\n}\n\nexport default Seating;\n","import React, { Component } from 'react';\nimport image from './flight.jpg';\n\n//Import components\nimport Seating from './Seating.js';\n\n//Import Designs\nimport {Container,Grid,Card,CardMedia,Typography,TextField,FormControl,Alert} from '@mui/material';\n\n//Create a component to show form\nclass Booking extends Component{    \n\n    constructor(props){\n        super(props); \n        this.state = {seating: \"[[3,2], [4,3], [2,3], [3,4]]\",passenger:30,error:0};\n    }\n\n    IsJsonString(str) {\n        try {\n            JSON.parse(str);\n        } catch (e) {\n            return false;\n        }\n        return true;\n    }\n    \n    handleSeating = externalId => (event) => { \n        let seating = event.target.value;\n        let check_json = this.IsJsonString(seating);\n       \n        this.setState({seating : seating});\n        \n        if(!check_json)\n            this.setState({error : 1}); \n        else   \n            this.setState({error : 0});  \n    }\n\n    handlePassenger = externalId => (event) => { \n        this.setState({passenger : event.target.value}); \n    }\n\n    render(){\t\n        const seat = this.state;\n        return (\n            <Container maxWidth=\"false\">\n                <Grid container>\n                    <Grid item xs={12}>\n                        <Card>\n                            <CardMedia className=\"airplane_header_img\" image={image}  component=\"img\" height=\"60%\"/>\n                        </Card>\n                    </Grid>\n\n                    <Grid item xs={12}>\n                        <Typography className=\"airplane_h4\" variant=\"h4\" align=\"center\">Airplane Seat Booking</Typography>\n                    </Grid>\n\n                    <Grid container direction=\"row\" justifyContent=\"center\">\n                        <Grid item xs={7}>\n                            <FormControl fullWidth sx={{ m: 1 }} variant=\"standard\">\n                                <TextField id=\"seating-arrangement\" label=\"Seating Arrangement\" value={this.state.seating} variant=\"standard\" onChange={this.handleSeating()} />\n                                <Typography>Example seating arrangement: [[3,2], [4,3], [2,3], [3,4]]</Typography>\n                                {this.state.error === 1 &&\n                                    <Alert severity=\"error\">Please check the seating value</Alert>\n                                }\n                            </FormControl>\n                        </Grid>\n\n                        <Grid item xs={7}>\n                            <FormControl fullWidth sx={{ m: 1 }} variant=\"standard\">\n                                <TextField type=\"number\" id=\"passenger\" label=\"Passenger\" value={this.state.passenger} variant=\"standard\" onChange={this.handlePassenger()} />\n                            </FormControl>\n                        </Grid>\n                   </Grid>\n                </Grid>\n                {this.state.error === 0 &&\n                    <Seating {...seat} />\n                }\n            </Container>\n        )\n    }\n}\n\nexport default Booking;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n/*** Import needed component and CSS  ***/\nimport './index.css';\nimport Booking from './Booking';\n\n/*** Render component to div on HTML  ***/\nReactDOM.render(\n  <React.StrictMode>\n    <Booking />\n  </React.StrictMode>,\n  document.getElementById('airplane_booking')\n);\n\n\n"],"sourceRoot":""}